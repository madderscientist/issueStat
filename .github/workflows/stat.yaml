name: Dashboard-Stats
on:
  issues:
    types: [opened, closed, reopened]
    # , labeled, unlabeled] 会重复触发，因此注释掉。人为分配tag后可以手动触发
  workflow_dispatch:

permissions:
  contents: write
  issues: read

jobs:
  stats:
    runs-on: ubuntu-latest
    steps:
      - name: Set up GitHub CLI
        run: sudo apt-get update && sudo apt-get install gh -y

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # 需要 force-push tag

      - name: Aggregate stats via GraphQL
        id: stats
        shell: bash
        run: |
          set -e
          set -x
          # 需要两个变量：仓库 owner 与 name
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"

          # 1. 拿总 issue 数（open + closed）
          TOTAL_QUERY='query($owner:String!,$name:String!){
            repository(owner:$owner,name:$name){
              open:issues(states:OPEN){totalCount}
              # closed:issues(states:CLOSED){totalCount}
            }
          }'
          TOTAL_JSON=$(gh api graphql -f query="$TOTAL_QUERY" -F owner="$OWNER" -F name="$REPO" --jq '.data.repository.open.totalCount')
          # [.data.repository.open.totalCount,.data.repository.closed.totalCount] | add')
          echo "total=$TOTAL_JSON" >> $GITHUB_OUTPUT

          # ② 拿所有 open issue 的 labels（分页到完）并一次性聚合
          LABELS_QUERY='query($owner:String!,$name:String!,$cursor:String){
            repository(owner:$owner,name:$name){
              issues(states:OPEN,first:100,after:$cursor){
                pageInfo{hasNextPage endCursor}
                nodes{labels(first:100){nodes{name}}}
              }
            }
          }'

          CURSOR=""
          LABELS_JSON=$(
            while :; do
              RES=$(gh api graphql -f query="$LABELS_QUERY" \
                    -F owner="$OWNER" -F name="$REPO" -F cursor="$CURSOR")
              # 把本轮所有 label 名打印出来
              echo "$RES" | jq -r '.data.repository.issues.nodes[].labels.nodes[].name'
              # 是否继续
              HAS=$(echo "$RES" | jq -r '.data.repository.issues.pageInfo.hasNextPage')
              [[ "$HAS" == "true" ]] || break
              CURSOR=$(echo "$RES" | jq -r '.data.repository.issues.pageInfo.endCursor')
            done \
            | sort \
            | uniq -c \
            | jq -R -s -c 'split("\n")[:-1]                        # 去掉最后空行
                          | map(capture(" *(?<count>\\d+) (?<name>.*)"))
                          | map({key: .name, value: (.count | tonumber)})
                          | from_entries'
          )

          echo "labels=$LABELS_JSON" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Force-push dashboard tag 🏷️
        run: |
          JSON=$(jq -c -n \
            --argjson total "${{ steps.stats.outputs.total }}" \
            --argjson labels '${{ steps.stats.outputs.labels }}' \
            --arg updated "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '$ARGS.named')

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 删除本地/远程旧 tag
          git tag -d dashboard || true
          git push origin :refs/tags/dashboard || true

          # 新建附注 tag
          git tag -a dashboard -m "$JSON" ${{ github.sha }}
          git push origin dashboard --force
        env:
          GH_TOKEN: ${{ github.token }}